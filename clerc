#!/bin/sh
##
## ** CLE : Command Live Environment **
##
#* author:  Michael Arbet (marbet@redhat.com)
#* home:    https://github.com/micharbet/CLE
#* version: 2023-07-12 (Zodiac)
#* license: GNU GPL v2
#* Copyright (C) 2016-2023 by Michael Arbet

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# CLE provides:
# -improved look&feel: responsive colorful prompt, highlighted exit code
# -persistent alias store - command 'aa'
# -rich history - commands 'h' and 'hh'
# -seamless remote CLE session, with no installation - use 'lssh' instead 'ssh'
# -local live session - lsu/lsudo (su/sudo wrappers)
# -setup from command line, eg. 'cle color RGB'
# -find more using 'cle help' and 'cle doc'
#
# Quick setup:
# 1. Download and execute this file within your shell session
# 2. Integrate it into your profile:
#	$ . clerc
#	$ cle deploy
# 3. Enjoy!


# Check if the shell is interactive and CLE not yet started
[ -t 0 -a -z "$CLE_EXE" ] || return

# Now it really starts, warning: magic inside!


# Startup sequence
export CLE_RC
_C=$SHELL:$BASH:$ZSH_NAME:$0
_T=/var/tmp/$USER
case  $_C in
*zsh::*zsh:*/rc*) # started FROM .zshrc
	CLE_RC=$0
	;;
*clerc*|*:*/rc*) # executed as a command from .cle directory
	CLE_RC=$(cd `dirname $0`;pwd;)/$(basename $0) # full path to this file
	SH=$SHELL
	while [ $1 ]; do
		case $1 in
		-b*)	SH=`which bash`		# force bash
			export CLE_ARG='-b'
			;;
		-z*)	SH=`which zsh 2>/dev/null || which bash` # try zsh
			export CLE_ARG='-z'
			;;
		-m)	CLE_MOTD=`uptime`
			export CLE_MOTD
			;;
		*)	echo "$0: unknown option '$1'"; exit 1;;
		esac
		shift
	done
	export CLE_PROF=1
	case $SH in
	*zsh)
		export ZDOTDIR=$_T
		mkdir -p $ZDOTDIR
		ln -sf $CLE_RC $ZDOTDIR/.zshrc
		exec zsh
		;;
	*)
		exec bash --rcfile $0
		;;
	esac
	;;
*bash:*bash) # bash session resource
	CLE_RC=$BASH_SOURCE
	;;
*zsh:*zsh) # zsh session resource (started AS TEMPORARY .zshrc)
	unset ZDOTDIR
	;;
*)	echo "CLE startup failed: 'case $_C'";;
esac


# execute script and log its filename into CLE_EXE
# also ensure the script will be executed only once
_clexe () {
	[ -f "$1" ] || return 1
	[[ $CLE_EXE =~ :$1[:$] ]] && return
	CLE_EXE=$CLE_EXE:$1
	source $1
}
CLE_EXE=$CLE_RC

# Run profile files
# current shell
CLE_SH=`basename $BASH$ZSH_NAME`
if [ -n "$CLE_PROF" ]; then
	_clexe /etc/profile
	_clexe $HOME/.${CLE_SH}rc
	unset CLE_PROF
fi

# Use alias built-ins for startup
unset -f alias unalias 2>/dev/null
unalias aa h hh .. ... 2>/dev/null

# Variables init

# First run check
if [[ $CLE_RC =~ clerc ]]; then
	CLE_RD=$HOME/.cle-`whoami`
	mkdir -m 755 -p $CLE_RD
	CLE_1=$CLE_RD/rc1
	cp $CLE_RC $CLE_1
	chmod 755 $CLE_1
	CLE_RC=$CLE_1
fi

# CLE_RC can be relative path, make it full
CLE_RD=$(cd `dirname $CLE_RC`;pwd;)
CLE_RC=$CLE_RD/`basename $CLE_RC`

# FQDN hack
CLE_FHN=$HOSTNAME
_N=`hostname`
[ ${#CLE_FHN} -lt ${#_N} ] && CLE_FHN=$_N
CLE_IP=${CLE_IP:-`cut -d' ' -f3 <<<$SSH_CONNECTION`}

# where in the deep space CLE grows
CLE_SRC=https://raw.githubusercontent.com/bsahane/CLE/Zodiac
CLE_SRC1=https://raw.githubusercontent.com/bsahane/CLE/Zodiac
CLE_VER=`sed -n 's/^#\* version: //p' $CLE_RC`

# find writable folder
_H=$HOME
[ -w $_H ] || _H=$_T
[ -r $HOME ] || HOME=$_H
[ $PWD = $_T ] && cd
CLE_D=$_H/`sed 's:/.*/\(\..*\)/.*:\1:' <<<$CLE_RC`
mkdir -m 755 -p $CLE_D

# config, tweak, etc...
CLE_CF=$CLE_D/cf-$CLE_FHN
CLE_AL=$CLE_D/al
CLE_HIST=$_H/.clehistory
_N=`sed 's:.*/rc1*::' <<<$CLE_RC`
CLE_WS=${_N/-/}
CLE_TW=$CLE_RD/tw$_N
CLE_ENV=$CLE_RD/env$_N
CLE_TTY=`tty|tr -d '/dev'`
PROMPT_DIRTRIM=3

# who I am
_N=`sed -n 's;.*cle-\(.*\)/.*;\1;p' <<<$CLE_RC`
export CLE_USER=${CLE_USER:-${_N:-$(whoami)}}

# Internal functions

_clebnr () {
cat <<EOT

$_CC   ___| |     ____| $_CN Command Live Environment activated
$_CB  |     |     __|   $_CN ...bit of life to the command line
$_Cb  |     |     |     $_CN Learn more:$_CL cle help$_CN and$_CL cle doc$_CN
$_Cb$_CD \____|_____|_____| $_CN Uncover the magic:$_CL less $CLE_RC$_CN

EOT
}

# boldprint
_clebold () { printf "$_CL$*$_CN\n";}

# simple question
_cleask () (
	PR="$_CL$* (y/N) $_CN"
	[ $ZSH_NAME ] && read -ks "?$PR" || read -n 1 -s -p "$PR"
	echo ${REPLY:=n}
	[ "$REPLY" = "y" ]
)

# Create color table
_cletable () {
	_C_=$TERM
	_CN=`tput sgr0`
	_CL=`tput bold`
	_CU=`tput smul`;_Cu=`tput rmul`
	_CV=`tput rev`
	_CI=`tput sitm`;_Ci=`tput ritm`
	_CD=`tput dim`
	_Ck=$_CN$(tput setaf 0)
	_Cr=$_CN$(tput setaf 1)
	_Cg=$_CN$(tput setaf 2)
	_Cy=$_CN$(tput setaf 3)
	_Cb=$_CN$(tput setaf 4)
	_Cm=$_CN$(tput setaf 5)
	_Cc=$_CN$(tput setaf 6)
	_Cw=$_CN$(tput setaf 7)
	case `tput colors` in
	8)
		_CK=$_Ck$_CL
		_CR=$_Cr$_CL
		_CG=$_Cg$_CL
		_CY=$_Cy$_CL
		_CB=$_Cb$_CL
		_CM=$_Cm$_CL
		_CC=$_Cc$_CL
		_CW=$_Cw$_CL
		;;
	*)
		_CK=$_CN$(tput setaf 8)$_CL
		_CR=$_CN$(tput setaf 9)$_CL
		_CG=$_CN$(tput setaf 10)$_CL
		_CY=$_CN$(tput setaf 11)$_CL
		_CB=$_CN$(tput setaf 12)$_CL
		_CM=$_CN$(tput setaf 13)$_CL
		_CC=$_CN$(tput setaf 14)$_CL
		_CW=$_CN$(tput setaf 15)$_CL
		;;
	esac
	_Ce=$_CR$_CL$_CV # err highlight
}

# set prompt colors
_cleclr () {
        local C I CI E
        case "$1" in
        red)    C=RrR;;
        green)  C=GgG;;
        yellow) C=YyY;;
        blue)   C=BbB;;
        cyan)   C=CcC;;
        magenta) C=MmM;;
        grey|gray) C=wNW;;
        tricolora) C=RBW;;
        marley) C=RYG;; # Bob Marley style :-) have a smoke and imagine...
        *)      C=$1;;
        esac
        # decode colors and prompt strings
        [ ${#C} = 3 ] && C=D${C}L || C=${C}L
        for I in {0..4};do
                eval "CI=\$_C${C:$I:1}"
                # check for exsisting color, ignore 'dim' and 'italic as they might not be defined
                if [[ -z "$CI" && ! ${C:$I:1} =~ [ID] ]]; then
                        echo "Wrong color code '${C:$I:1}' in $1" && CI=$_CN
                        E=1
                fi
                eval "_C$I=\$CI"
        done
        [ ${C:0:1} = D ] && _C0=$_C1$_CD
        if [ $E ]; then
                echo "Choose predefined scheme:$_CL"
                declare -f _cleclr|sed -n 's/^[ \t]*(*\(\<[a-z |]*\)).*/ \1/p'|tr -d '\n|'
                printf "\n${_CN}Alternatively create your own 3-5 letter combo using rgbcmykw/RGBCMYKW\n"
                printf "E.g.:$_CL cle color rgB\n"
                _cleclr gray
                return 1
        else
                CLE_CLR=${C:0:5}
        fi
}


# CLE prompt escapes
_clesc () (
	EXTESC="
	 -e 's/\^i/\$CLE_IP/g'
	 -e 's/\^h/\$CLE_SHN/g'
	 -e 's/\^H/\$CLE_FHN/g'
	 -e 's/\^U/\$CLE_USER/g'
	 -e 's/\^g/\$(_clegitwb)/g'
	 -e 's/\^?/\$_EC/g'
	 -e 's/\^[E]/\\$_PE\$_CE\\$_Pe\[\$_EC\]\\$_PE\$_CN\$_C0\\$_Pe/g'
	 -e 's/\^[C]\(.\)/\\$_PE\\\$_C\1\\$_Pe/g'
	 -e 's/\^v\([[:alnum:]_]*\)/\1=\$\1/g'
	 -e 's/\^\^/\^/g'
	"
	[ $ZSH_NAME ] && SHESC="-e 's/\\\\n/\$_PN/g'
	 -e 's/\\^[$%#]/%#/g'
	 -e 's/\\\\d/%D{%a %b %d}/g'
	 -e 's/\\\\D/%D/g'
	 -e 's/\\\\h/%m/g'
	 -e 's/\\\\H/%M/g'
	 -e 's/\\\\j/%j/g'
	 -e 's/\\\\l/%l/g'
	 -e 's/\\\\s/zsh/g'
	 -e 's/\\\\t/%*/g'
	 -e 's/\\\\T/%D{%r}/g'
	 -e 's/\\\\@/%@/g'
	 -e 's/\\\\A/%T/g'
	 -e 's/\\\\u/%n/g'
	 -e 's/\\\\w/%$PROMPT_DIRTRIM~/g'
	 -e 's/\\\\W/%1~/g'
	 -e 's/\\\\!/%!/g'
	 -e 's/\\\\#/%i/g'
	 -e 's/\\\\\[/%{/g'
	 -e 's/\\\\\]/%}/g'
	 -e 's/\\\\\\\\/\\\\/g'
	" || SHESC="-e 's/\^[$%#]/\\\\\$/g'"
	SUBS=`tr -d '\n\t' <<<$SHESC$EXTESC`
	eval sed "$SUBS" <<<"$*"
)

_cle_r () {
	[ "$1" != h ] && return
	printf "\n$_Cr     ,==~~-~w^, \n    /#=-.,#####\\ \n .,!. ##########!\n((###,. \`\"#######;."
	printf "\n &######\`..#####;^###)\n$_CW   (@@$_Cr^#############\"\n$_CW"
	printf "    \\@@@\\__,-~-__,\n     \`&@@@@@69@@/\n        ^&@@@@&*\n$_CN\n"
}

# override default prompt strings with configured values
_clepcp () {
	local I
	for I in 0 1 2 3 T; do
		eval "CLE_P$I=\${CLE_PB$I:-\$CLE_P$I}"
		[ $ZSH_NAME ] && eval "CLE_P$I=\${CLE_PZ$I:-\$CLE_P$I}"
		[ $1 ] && unset CLE_P{B,Z}$I
	done
}

# craft the prompt from defined strings
_cleps () {
	[ "$CLE_PT" ] && PS1="$_PE\${_CT}$(_clesc $CLE_PT)\${_Ct}$_Pe" || PS1=''
	PS1=$PS1`_clesc "^C0$CLE_P0^C1$CLE_P1^C2$CLE_P2^C3$CLE_P3^CN^C4"`
	PS2=`_clesc "^C3>>> ^CN^C4"`
}

# default prompt strings and colors
_cledefp () {
	CLE_P0='^E \t '
	CLE_P1='\u '
	CLE_P2='^h '
	CLE_P3='\w ^$ '
	CLE_PT='\u@^H'
	case "$USER-${CLE_WS#$CLE_FHN}" in
	root-)	_DC=red;;
	*-)	_DC=marley;;
	root-*)	_DC=RbB;;
	*-*)	_DC=blue;;
	esac
}

# save configuration
_clesave () (
	echo "# $CLE_VER"
	_clevdump "CLE_CLR|CLE_PB.|CLE_PZ."
) >$CLE_CF


# prompt callback functions
_PST='${PIPESTATUS[@]}'
[ $ZSH_NAME ] && _PST='${pipestatus[@]}'
[ "$BASH_VERSINFO" = 3 ] && _PST='$?'
precmd () {
	eval "_EC=$_PST"
	[[ $_EC =~ [1-9] ]] || _EC=0
	local IFS S DT C
	unset IFS
	if [ $BASH ]; then
		C=$_HN
		history -a
	else
		C=`fc -lt ";$CLE_HTF;" -1`
		C=${C#*;}
	fi
	DT=${C/;*}
	C=${C/$DT;}
	C="${C#"${C%%[![:space:]]*}"}"
	if [[ $C =~ ^\# ]]; then
		_clerh '#' "$PWD" "$C"	# record a note to history
	elif [ $_HT ]; then	# check timer - indicator of executed command
		S=$((SECONDS-${_HT:-$SECONDS}))
		_clerh "$DT" $S "$_EC" "$PWD" "$C"
		[ "$_EC" = 0 ] && _CE="" || _CE="$_Ce"
		_HT=
	else
		_CE=''
		_EC=0
	fi
	[ $BASH ] && trap _clepreex DEBUG
}

# run this function before the issued command
preexec () {
	_HT=$SECONDS
}

CLE_HTF='%F %T'
HISTTIMEFORMAT=${HISTTIMEFORMAT:-$CLE_HTF }

# Bash hack
if [ $BASH ]; then
	history -r $HISTFILE
	_HP=`HISTTIMEFORMAT=";$CLE_HTF;" history 1`
	_HP=${_HP#*;}
_clepreex () {
	_HN=`HISTTIMEFORMAT=";$CLE_HTF;" history 1`
	_HN=${_HN#*;}
	echo -n $_CN
	[ "$_HP" = "$_HN" ] && return
	_HP=$_HN
	trap "" DEBUG
	preexec "$BASH_COMMAND"
}
fi

# rich history record
_clerh () {
	local DT RC REX ID V VD W
	case $# in
	3)	DT=`date "+$CLE_HTF"`;SC='';;
	4)	DT=`date "+$CLE_HTF"`;SC=$1;shift;;
	5)	DT=$1;SC=$2;shift;shift;;
	esac
	REX="^cd\ |^cd$|^-$|^\.\.$|^\.\.\.$|^aa$|^lscreen|^h$|^hh$|^hh\ "
	[[ $3 =~ $REX  || -n $_NORH ]] && unset _NORH && return
	W=${2/$HOME/\~}
	ID="$DT;$CLE_USER-$$"
	REX='^\$[A-Za-z0-9_]+'
	case "$3" in
	echo*)
		echo -E "$ID;$SC;$1;$W;$3"
		for V in $3; do
			if [[ $V =~ $REX ]]; then
				V=${V/\$/}
				VD=`_clevdump $V`
				echo -E "$ID;;$;;${VD:-unset $V}"
			fi
		done;;
	xx) # directory bookmark
		echo -E "$ID;;*;$W;" ;;
	\#*)
		echo -E "$ID;;#;$W;$3" ;;
	*)
		echo -E "$ID;$SC;$1;$W;$3" ;;
	esac
} >>$CLE_HIST


# print MOTD + more
if [ "$CLE_MOTD" ]; then
	[ -f /etc/motd ] && cat /etc/motd
	printf "\n$CLE_MOTD"
	_clebold "\n CLE/$CLE_SH $CLE_VER\n"
	unset CLE_MOTD
fi

# read inherited environment
[ $CLE_WS ] && _clexe $CLE_ENV

# colorize LS
case $OSTYPE in
linux*)		alias ls='ls --color=auto';;
darwin*)	export CLICOLOR=1; export LSCOLORS=ExGxBxDxCxEgEdxbxgxcxd;;
FreeBSD*)       alias ls='ls -G "$@"';;
*)		alias ls='ls -F';; # at least some file type indication
esac

# colorized GREP except on busybox
if [ -L `command which grep` ];then
	unalias grep egrep fgrep xzgrep xzegrep xzfgrep zgrep zegrep zfgrep 2>/dev/null
else
	alias grep='grep --color=auto'
fi

# Remove alias 'which' if there is no version supporting extended options
{ alias|command which -i which || unalias which; } >/dev/null 2>&1

## ** cd command enhancements **
## `.. ...`     - up one or two levels
## `-`  (dash)  - cd to recent dir
- () { cd - >/dev/null; _clevdump OLDPWD;}
.. () { cd ..;}
... () { cd ../..;}
## `xx` & `cx`   - bookmark $PWD & use later
xx () { _XX=$PWD; echo path bookmark: $_XX; }
cx () { cd $_XX; }

##
## ** Alias management **
aa () {
	local AED=$CLE_AL.ed
	local Z=${ZSH_NAME:+-L}
	case "$1" in
	"")	## `aa`         - show aliases
		builtin alias $Z|sed "s/^alias \([^=]*\)=\(.*\)/$_CL\1$_CN\t\2/";;
	-s)	## `aa -s`      - save aliases
		builtin alias $Z >$CLE_AL;;
	-e)	## `aa -e`      - edit aliases
		builtin alias $Z >$AED
		vi $AED
		[ $ZSH_NAME ] && builtin unalias -m '*' || builtin unalias -a
		. $AED;;
	*=*)	## `aa a='b'`   - create new alias and save
		builtin alias "$*"
		aa -s;;
	*)	builtin alias "$*";;
	esac
}


##
## ** History tools **
## `h`               - shell 'history' wrapper
h () (
	([ $BASH ] && HISTTIMEFORMAT=";$CLE_HTF;" history "$@" || fc -lt ";$CLE_HTF;" "$@")|( IFS=';'; while read -r N DT C;do
		echo -E "$_CB$N$_Cb $DT $_CN$_CL$C$_CN"
	done;) 
)

## `hh [opt] [srch]` - rich history viewer
hh () (
	OUTF='_clehhout'
	DISP=""
	S=""
	while getopts "mdtsncfl" O;do
		case $O in
		m)	## `hh -m`           - my commands, exclude other users
			S=$S" -e'/.*;$CLE_USER/!d'";;
		d)	## `hh -d`           - today's commands
			S=$S" -e '/^$(date "+%F") /!d'";;
		t)	## `hh -t`           - commands from current session
			S=$S" -e '/.*;$CLE_USER-$$;.*/!d'";;
		s)	## `hh -s`           - select successful commands only
			S=$S" -e '/.*;.*;.*;0;.*/!d'";;
		n)	## `hh -n`           - narrow output, hide time and session id
			OUTF='_clehhout n';;
		c)	## `hh -c`           - show only commands
			OUTF="sed -n 's/^[^;]*;[^;]*;[^;]*;[0-9]*;[^;]*;\(.*\)/\1/p' |uniq";;
		f) 	## `hh -f`           - show working folder history
			OUTF="sed -n 's/^[^;]*;[^;]*;[^;]*;[0-9]*;\([^;]*\);.*/\1/p' |sort|uniq";;
		l)	## `hh -l`           - display using 'less'
			DISP="|less -r +G";;
		*)	cle help hh;return
		esac
	done
	shift $((OPTIND-1))

	A=${*:-100}
	[[ $A =~ ^[0-9]*$ ]] && N=$A || S=$S" -e '/${A////\\/}/!d'"

	eval "tail -n ${N:-+1} $CLE_HIST ${S:+|sed $S} | $OUTF  $DISP"
)

# rich history colorful output filter
_clehhout () (
	NRW=$1
	set -f
	while read -r L; do
		IFS=';'
		set -- $L
		case $4 in
		 0) CE=$_Cg; CC=$_CN;;
		 @) CE=$_Cc; CC=$_Cc;;
		 '#'|$|'*') CE=$_CY; CC=$_Cy;;
		 *) CE=$_Cr; CC=$_CN;;
		esac
		if [ $NRW ]; then
			printf " $CE%-9s $CC%-20s: $_CL" "$4" "$5"
		else
			printf "$_CB%s $_Cb%-13s $_CB%3s $CE%-5s $CC%-10s: $_CL" "$1" "$2" "$3" "$4" "$5"
		fi
		shift 5
		printf "%s\n" "$*"
	done
)

# zsh hack to accept notes on cmdline
[ $ZSH_NAME ] && '#' () { true; }

_clegitwb () (
	# go down the folder tree and look for .git
	while [ "$PWD" != / ]; do
		[ -d .git ] && { git symbolic-ref --short HEAD; return; }
		cd ..
	done
	return 1  # not in git repository
	)


_clemdf () {
	sed -e "s/^###\(.*\)/$_CL\1$_CN/"\
	 -e "s/^##\( *\)\(.*\)/\1$_CU$_CL\2$_CN/"\
	 -e "s/^#\( *\)\(.*\)/\1$_CL$_CV \2 $_CN/"\
	 -e "s/\*\*\(.*\)\*\*/$_CL\1$_CN/"\
	 -e "s/\<_\(.*\)_\>/$_CU\1$_Cu/g"\
	 -e "s/\`\`\`/$_CD~~~~~~~~~~~~~~~~~$_CN/"\
	 -e "s/\`\([^\`]*\)\`/$_Cg\1$_CN/g"
}

_clevdump () (
	typeset 2>/dev/null | awk '/.* \(\)/{exit} /(^'$1')=/{gsub(/\\C-\[/,"\\E");print}'
)


##
## ** Live session wrappers **

# Environment packer
_clepak () {
	RH=${CLE_RD/\/.*/}
	RD=${CLE_RD/$RH\//}

	if [ $CLE_WS ]; then
		cd $RH
		RC=${CLE_RC/$RH\//}
		TW=${CLE_TW/$RH\//}
		EN=${CLE_ENV/$RH\//}
	else
		RH=/var/tmp/$USER
		mkdir -m 0755 -p $RH/$RD 2>/dev/null && cd $RH || cd
		RC=$RD/rc-$CLE_FHN
		TW=$RD/tw-$CLE_FHN
		EN=$RD/env-$CLE_FHN
		cp $CLE_RC $RC
		cp $CLE_TW $TW 2>/dev/null
		echo "# evironment $CLE_USER@$CLE_FHN" >$EN
		_clevdump "CLE_SRE|CLE_P..|^_C." >>$EN
		_clevdump "$CLE_EXP" >>$EN
		cat $CLE_AL >>$EN 2>/dev/null
	fi
	[ $1 ] && C64=`eval tar chzf - $RC $TW $EN 2>/dev/null | base64 | tr -d '\n\r '`
}

## `lssh [usr@]host`   - access remote system and take CLE along
lssh () (
	[ "$1" ] || { cle help lssh;return 1;}
	_clepak tar
	command ssh -t $* "
		H=/var/tmp/\$USER; mkdir -m 755 -p \$H; cd \$H
		[ \"\$OSTYPE\" = darwin ] && D=D || D=d
		echo $C64|base64 -\$D|tar xzmf - 2>/dev/null
		exec \$H/$RC -m $CLE_ARG"
)

## `lsudo [user]`      - sudo wrapper; root is the default account
lsudo () (
	_clepak
        sudo -i -u ${1:-root} $RH/$RC $CLE_ARG
)

## `lsu [user]`        - su wrapper
lsu () (
        _clepak
	S=
        [[ $OSTYPE =~ [Ll]inux ]] && S="-s /bin/sh"
        eval su $S -l ${1:-root} $RH/$RC
)

## `lksu [user]`       - ksu wrapper
lksu () (
	_clepak
        ksu ${1:-root} -a -c "cd;$RH/$RC"
)

## `lscreen [name]`    - gnu screen wrapper, join your recent session or start new
## `lscreen -j [name]` - join other screen sessions, ev. search by name
lscreen () (
	NM=$CLE_USER${1:+-$1}
	[ "$1" = -j ] && NM=${2:-.}
	SCRS=`screen -ls|sed -n "/$NM/s/^[ \t]*\([0-9]*\.[^ \t]*\)[ \t]*.*/\1/p"`
	NS=`wc -w <<<$SCRS`
	reset
	if [ $NS = 0 ]; then
		[ "$1" = -j ] && echo "No screen to join" && return 1
		SCF=$CLE_D/screenrc
		SN=$CLE_TTY-CLE.$NM
		_clerh @ $CLE_TTY "screen -S $SN"
		_clescrc >$SCF
		screen -c $SCF -S $SN $CLE_RC
	else
		if [ $NS = 1 ]; then SN=$SCRS
		else
			_clebold "${_CU}Current '$NM' sessions:"
			PS3="$_CL choose # to join: $_CN"
			select SN in $SCRS;do
				[ $SN ] && break
			done
		fi
		_clerh @ $CLE_TTY "screen -x $SN"
		screen -S $SN -X echo "$CLE_USER joining"
		screen -x $SN
	fi
)

# screenrc generator
_clescrc () {
cat <<-EOS
	source $HOME/.screenrc
	altscreen on
	autodetach on
	# enables shift-PgUp/PgDn
	termcapinfo xterm* ti@:te@
	# change window with ctrl-left/right
	bindkey "^[[1;5D" prev
	bindkey "^[[1;5C" next
	defscrollback 9000
	hardstatus alwayslastline
	hardstatus string '%{= Kk} %-w%{Wk}%n %t%{-}%+w %-=%{+b Y}$CLE_SHN%{G} %c'
	bind c screen $CLE_RC
	bind ^c screen $CLE_RC
EOS
cat <<<$CLE_SCRC
}



# shorten hostname
CLE_SHN=`eval sed "${CLE_SRE:-'s:\.[^.]*\.[^.]*$::'}" <<<$CLE_FHN`

[ $ZSH_NAME ] && setopt +o NOMATCH

# record this startup into rich history
_clerh @ $CLE_TTY "[${STY:-${CLE_WS:-WS}},$CLE_SH]"
[ $CLE_DEBUG ] && _clerh @ $PWD "$CLE_RC [$CLE_VER]"

_clexe $HOME/.cle-local
_clexe $CLE_AL
_clexe $CLE_TW
for M in $CLE_D/mod-*; do
	_clexe $M
done

[[ -d $HOME/bin && ! $PATH =~ $HOME/bin ]] && PATH=$PATH:$HOME/bin

# create the prompt in several steps
# 1. default prompt strings
_cledefp

# 2. override with inherited strings
[ $CLE_WS ] && _clepcp x

# 3. create color table if necessary
[ "$TERM" != "$_C_" -o -z "$_CN" ] && _cletable

# 4. get values from config file
# rewrite config of old CLE release
[ -f $CLE_D/cf -a ! -f $CLE_CF ] && cp $CLE_D/cf $CLE_CF
[ -r $CLE_CF ] && read _N <$CLE_CF || _N=Zodiac
[[ $_N =~ Zodiac ]] || {
	_O=$CLE_D/cf-old
	mv -f $CLE_CF $_O 2>/dev/null
	_R="s!^#.*!# $CLE_VER!"
	if [ $CLE_WS ]; then
		_R=$_R";/^CLE_P/d"
	else
		_R=$_R";s/^CLE_P\(.\)='\(.*\)'/CLE_PB\1='\2 '/"
		_R=$_R";s/%/^/g" # replace % with ^
		_R=$_R";s/\^c/^C/g" # replace ^c with ^C
		_R=$_R";s/\^e/^E/g" # replace ^c with ^E
	fi
	[ -f $_O ] && sed -e "$_R" <$_O >$CLE_CF
	rm -f $CLE_D/cle-mod 2>/dev/null # force refresh cle-mod
	unset _O _R
}
_clexe $CLE_CF
_clepcp

# 5. terminal specific

case $TERM in
linux)	 CLE_PT='';;	# no tits on console
screen*) CLE_PT='\u'
	printf "\e]0; screen: $CLE_USER@$CLE_FHN$_Ct\007"
	_CT=$'\ek'; _Ct=$'\e\\';;
*)	_CT=$'\e]0;'; _Ct=$'\007';;
esac

# 6. shell specific
if [ $BASH ]; then
	shopt -s checkwinsize
	_PE='\['; _Pe='\]'
else
	setopt PROMPT_SUBST SH_WORD_SPLIT
	_PE='%{'; _Pe='%}'
	_PN=$'\n' # zsh doesn't know '\n' as escape sequence! WTF?
fi

# 7. craft the prompt string
_cleps
_cleclr ${CLE_CLR:-$_DC}

PROMPT_COMMAND=precmd

# completions
_clecomp () {
	local A=(color p0 p1 p2 p3 cf mod env update reload doc help)
	local C
	COMPREPLY=()
	case $3 in
	p0) COMPREPLY="'$CLE_P0'";;
	p1) COMPREPLY="'$CLE_P1'";;
	p2) COMPREPLY="'$CLE_P2'";;
	p3) COMPREPLY="'$CLE_P3'";;
	#'') COMPREPLY=$A;;
	esac
	[ "$3" != "$1" ] && return
	for C in ${A[@]}; do
		[[ $C =~ ^$2 ]] && COMPREPLY+=($C)
	done
}

if [ $BASH ]; then
	# lssh completion
	declare -F _known_hosts >/dev/null && complete -F _known_hosts lssh
	_N=/usr/share/bash-completion
	_clexe $_N/bash_completion
	_clexe $_N/completions/ssh && complete -F _ssh lssh
else
	# ZSH completions
	autoload compinit && compinit
	autoload bashcompinit && bashcompinit
	compdef lssh=ssh
fi
complete -F _clecomp cle

# redefine alias builtins
alias () {
	if [ -n "$1" ]; then
		aa "$@"
	else
		builtin alias
	fi
}

unalias () {
	[ "$1" = -a ] && cp $CLE_AL $CLE_AL.bk  # BASH only!
	builtin unalias "$@"
	aa -s
}

# check manual/initial run
[ $CLE_1 ] && cat <<EOT
 It seems you started CLE running '$CLE_1' from command line
 Since this is the first run, consider setup in your profile.
 Run following command to hook CLE into your $HOME/.${CLE_SH}rc:
$_CL    cle deploy
EOT

[ -r . ] || cd

##
## ** CLE command & control **
cle () {
	local C I P S N
	C=$1;shift
	if declare -f _cle_$C >/dev/null;then
		_cle_$C $*
		return $?
	elif [ -f $CLE_D/cle-$C ]; then
		. $CLE_D/cle-$C $*
		return $?
	fi
	case $C in
	color)  ## `cle color COLOR`       - set prompt color
		[ $1 ]  && _cleclr $1 && _clesave;;
	p?)	## `cle p0-p3 [str]`       - show/define prompt parts
		I=${C:1:1}
		if [ "$1" ]; then
			P=B; [[ $* =~ % && -n "$ZSH_NAME" ]] && P=Z || unset CLE_PZ$I
			S=$*
			eval "[ \"\$S\" != \"\$CLE_P$I\" ] && { CLE_P$P$I='$*';_clepcp;_cleps;_clesave; }" || :
		else
			_clevdump CLE_P$I
		fi;;
	title)	## `cle title off|string`  - turn off window title or set the string
		case "$1" in
		off)	CLE_PT='';;
		'')	_clepcp;;
		*)	cle pT "$*";;
		esac
		_cleps;;
	cf)	## `cle cf [ed|reset|rev]` - view/edit/reset/revert configuration
		case "$1" in
		ed)	vi $CLE_CF  && . $CLE_RC;;
		reset)	mv -f $CLE_CF $CLE_CF-bk;;
		rev)	cp $CLE_CF-bk $CLE_CF;;
		"")
			if [ -f $CLE_CF ]; then
				_clebold $_CU$CLE_CF:
				cat $CLE_CF
			else
				echo Default/Inherited configuration
			fi
			return;;
		esac
		cle reload;;
	deploy) ## `cle deploy`            - hook CLE into user's profile
		P=$HOME/.cle-$USER
		mkdir -p $P
		cp $CLE_RC $P/rc
		CLE_RC=$P/rc
		unset CLE_1
		I='# Command Live Environment'
		S=$HOME/.${SHELL##*/}rc
		grep -A1 "$I" $S && _clebold CLE is already hooked in $S && return 1
		_cleask "Do you want to add CLE to $S?" || return
		echo -e "\n$I\n[ -f $CLE_RC ] && . $CLE_RC\n" | tee -a $S
		cle reload;;
	update) ## `cle update [master]`   - install fresh version of CLE
		N=$CLE_D/rc.new
		curl -k ${CLE_SRC/Zodiac/${1:-Zodiac}}/clerc >$N
		S=`sed -n 's/^#\* version: //p' $N`
		[ "$S" ] || { echo "Download error"; return 1; }
		echo current: $CLE_VER
		echo "new:     $S"
		I=`diff $CLE_RC $N` && { echo No difference; return 1;}
		_cleask Do you want to see diff? && cat <<<"$I"
		_cleask Do you want to install new version? || return
		cp $CLE_RC $CLE_D/rc.bk
		chmod 755 $N
		mv -f $N $CLE_RC
		cle reload
		N=cle-mod
		[ -f "$CLE_D/$N" ] || return
		echo updating modules
		curl -k $CLE_SRC/modules/$N >$CLE_D/$N && cle mod update
		;;
	reload) ## `cle reload [bash|zsh]` - reload CLE
		[[ $1 =~ ^[bz] ]] && S=-$1
		[ $S ] && exec $CLE_RC $S
		unset CLE_EXE
		. $CLE_RC
		echo CLE $CLE_VER;;
	mod)    ## `cle mod`               - cle module management
		_cleask Activate CLE modules? || return
		N=cle-mod
		P=$CLE_D/$N
		curl -k $CLE_SRC/modules/$N >$P
		grep -q "# .* $N:" $P || { _clebold Module download failed; rm -f $P; return 1;}
		cle mod "$@";;
	env)	## `cle env`               - inspect variables
		_clevdump 'CLE.*'|awk -F= "{printf \"$_CL%-12s$_CN%s\n\",\$1,\$2}";;
	help|-h|--help) ## `cle help [fnc]`        - show help
		P=`ls $CLE_D/cle-* 2>/dev/null`
		awk -F# "/\s##\s*.*$@|^##\s*.*$@/ { print \$3 }" ${CLE_EXE//:/ } $P | _clemdf | less -erFX;;
	doc)	## `cle doc`               - show documentation
		I=`curl -sk $CLE_SRC/doc/index.md`
		[[ $I =~ LICENSE ]] || { echo Unable to get documentation;return 1;}
		PS3="$_CL doc # $_CN"
		select N in $I;do
			[ $N ] && curl -sk $CLE_SRC/doc/$N |_clemdf|less -r; break
		done;;
	"")
		_clebnr
		sed -n 's/^#\*\(.*\)/\1/p' $CLE_RC
		;;
	*)	echo unimplemented function: cle $C;
		echo check cle help;
		return 1
		;;
	esac
}

unset _T _H _C _N _DC

# that's all, folks...

